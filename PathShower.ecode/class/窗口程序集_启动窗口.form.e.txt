.版本 2

.程序集 窗口程序集_启动窗口
.程序集变量 路径, 文本型, , "0"
.程序集变量 序号, 整数型

.子程序 __启动窗口_创建完毕
    输出调试文本 (mid (“123...456”, “123”, “456”))
    检查 (mid (“123...456”, “123”, “456”) ＝ “...”)
    重新加载 ()
    

.子程序 _画板1_绘画
    .参数 重画区左边, 整数型
    .参数 重画区上边, 整数型
    .参数 重画区右边, 整数型
    .参数 重画区下边, 整数型
    .局部变量 坐标, 文本型, , "0"
    .局部变量 xx, 整数型, , "0"
    .局部变量 yy, 整数型, , "0"
    .局部变量 i, 整数型
    .局部变量 坐标个数, 整数型
    .局部变量 width, 整数型
    .局部变量 height, 整数型
    .局部变量 cellSize, 整数型
    .局部变量 rectSize, 整数型
    .局部变量 x, 整数型
    .局部变量 y, 整数型
    .局部变量 clr, 整数型

    坐标 ＝ 分割文本 (路径 [序号], “>”, )
    坐标个数 ＝ 取数组成员数 (坐标)
    重定义数组 (xx, 假, 坐标个数)
    重定义数组 (yy, 假, 坐标个数)
    .计次循环首 (坐标个数, i)
        xx [i] ＝ 到整数 (mid (坐标 [i], “(”, “,”))
        yy [i] ＝ 到整数 (mid (坐标 [i], “,”, “)”))
        .如果真 (xx [i] ＞ height)
            height ＝ xx [i]
        .如果真结束
        .如果真 (yy [i] ＞ width)
            width ＝ yy [i]
        .如果真结束
        
    .计次循环尾 ()
    cellSize ＝ 50
    rectSize ＝ cellSize ÷ 2
    
    .计次循环首 (width ＋ 1, y)
        画板1.画直线 ((y － 1) × cellSize, 0, (y － 1) × cellSize, cellSize × height)
    .计次循环尾 ()
    .计次循环首 (height ＋ 1, x)
        画板1.画直线 (0, (x － 1) × cellSize, cellSize × width, (x － 1) × cellSize)
    .计次循环尾 ()
    
    .计次循环首 (width, y)
        画板1.置写出位置 ((y － 0.5) × cellSize, cellSize × height)
        画板1.写出 (y)
    .计次循环尾 ()
    
    .计次循环首 (height, x)
        画板1.置写出位置 (cellSize × width ＋ 5, (x － 0.5) × cellSize)
        画板1.写出 (x)
    .计次循环尾 ()
    
    .计次循环首 (坐标个数, i)
        画板1.填充矩形 (cellSize × 0.5 ＋ (yy [i] － 1) × cellSize － rectSize ÷ 2, cellSize × 0.5 ＋ (xx [i] － 1) × cellSize － rectSize ÷ 2, cellSize × 0.5 ＋ (yy [i] － 1) × cellSize ＋ rectSize ÷ 2, cellSize × 0.5 ＋ (xx [i] － 1) × cellSize ＋ rectSize ÷ 2)
    .计次循环尾 ()
    
    .计次循环首 (坐标个数 － 1, i)
        画板1.画直线 (cellSize × 0.5 ＋ (yy [i] － 1) × cellSize, cellSize × 0.5 ＋ (xx [i] － 1) × cellSize, cellSize × 0.5 ＋ (yy [i ＋ 1] － 1) × cellSize, cellSize × 0.5 ＋ (xx [i ＋ 1] － 1) × cellSize)
    .计次循环尾 ()
    
    画板1.置写出位置 (0, cellSize × height ＋ cellSize ÷ 2 × 1)
    画板1.写文本行 (“第” ＋ 到文本 (序号) ＋ “条路径：”)
    画板1.写文本行 (路径 [序号])
    clr ＝ 画板1.文本颜色
    .如果真 (坐标个数 ％ 2 ＝ 0)
        画板1.文本颜色 ＝ #红色
    .如果真结束
    画板1.写文本行 (“共” ＋ 到文本 (坐标个数) ＋ “步”)
    画板1.文本颜色 ＝ clr

.子程序 mid, 文本型
    .参数 str, 文本型
    .参数 a, 文本型
    .参数 b, 文本型
    .局部变量 p1, 整数型
    .局部变量 p2, 整数型

    p1 ＝ 寻找文本 (str, a, , 假)
    .如果真 (p1 ＝ -1)
        返回 (“”)
    .如果真结束
    p2 ＝ 寻找文本 (str, b, p1 ＋ 取文本长度 (a), 假)
    .如果真 (p2 ＝ -1)
        返回 (“”)
    .如果真结束
    返回 (取文本中间 (str, p1 ＋ 取文本长度 (a), p2 － p1 － 取文本长度 (a)))

.子程序 _按钮2_被单击
    序号 ＝ 序号 － 1
    .如果真 (序号 ≤ 0)
        序号 ＝ 取数组成员数 (路径)
    .如果真结束
    画板1.重画 ()
    

.子程序 _按钮1_被单击
    序号 ＝ 序号 ＋ 1
    .如果真 (序号 ＞ 取数组成员数 (路径))
        序号 ＝ 1
    .如果真结束
    画板1.重画 ()

.子程序 重新加载
    路径 ＝ 分割文本 (编辑框1.内容, #换行符, )
    序号 ＝ 1
    画板1.重画 ()
    

.子程序 _按钮4_被单击
    .判断开始 (时钟1.时钟周期 ＝ 0)
        时钟1.时钟周期 ＝ 1000 ÷ 到整数 (编辑框2.内容)
        按钮4.标题 ＝ “停止轮播”
    .默认
        时钟1.时钟周期 ＝ 0
        按钮4.标题 ＝ “自动轮播”
    .判断结束
    

.子程序 _时钟1_周期事件
    _按钮1_被单击 ()

.子程序 _按钮3_被单击
    重新加载 ()

